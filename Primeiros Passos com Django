Começando com o Django

OBS.: $ Está sendo usado para simbolizar o uso de códigos, não add ele no terminal

1 - Criando um ambiente virtual
--> Criamos uma pasta para armazenar os projetos
$ mkdir nomePasta
$ cd nomePasta
--> Dentro da pasta, vamos criar um ambiente virtual chamado myenv
$ python3 -m venv myenv

2 - Iniciando o ambiente virtual(Fazer isso sempre)
--> Dentro da pasta criada anteriormente 
$ source myenv/bin/activate (Sendo myenv o nome do ambiente virtual)
--> Se tudo funcionar, no terminal vai aparecer (myenv) no inicio da linha

3 - Criando um projeto
--> Com o ambiente virtual ativado
$ django-admin startproject mysite (Sendo mysite o nome do projeto que se deseja criar)
--> Se tudo funcionar, no diretório criado mysite, vai existir um arquivo manage.py e uma pasta mysite

4 - Criando um banco de dados (Com o Sqlite3)
$ python manage.py migrate
--> Feito isso, podemos rodar o projeto para ver se está tudo funcionando
$ python manage.py runserver (Comando deve ser executado na pasta que tem o arquivo manage.py)
--> Para saber se funcionou, no navegador digite "http://127.0.0.1:8000/

5 - Modelos
--> Antes de criar modelos, devemos criar um aplicativo para nosso projeto:
$ python manage.py startapp blog (Sendo blog o nome do app)
--> Depois de criar um aplicativo, devemos dizer ao Django para usá-lo. Fazemos isso no arquivo mysite/settings.py, na linha onde tem INSTALLED_APPS, e adicionar uma linha conforme descrito abaixo:
	INSTALLED_APPS = (
	    'django.contrib.admin',
	    'django.contrib.auth',
	    'django.contrib.contenttypes',
	    'django.contrib.sessions',
	    'django.contrib.messages',
	    'django.contrib.staticfiles',
	    'blog',
	)
--> Para nosso blog, vamos querer criar um modelo que armazene nome do autor, titulo da postagem, texto da postagem, data de criação e data da publicação, além de um método que publique nossas postagens, para isso, no arquivo blog/models.py, fazemos: 
	from django.db import models
	from django.utils import timezone
	class Post(models.Model):
		author = models.ForeignKey('auth.User') 
		title = models.CharField(max_length=200)
		text = models.TextField()
		created_date = models.DateTimeField(default=timezone.now)
		published_date = models.DateTimeField(blank=True, null=True)
	
		def publish(self):
			self.published_date = timezone.now()
			self.save()

		def __str__(self):
			return self.title
--> Para criar no BD as tabelas referentes aos modelos execute:
$ python manage.py makemigrations blog (Sendo blog o nome do app)
--> Com isso o Django prepara um arquivo de migração, que deve ser aplicado com o comando abaixo
$ python manage.py migrate blog
--> Com isso o banco foi criado, porém para add e remover dados, precisamos passar o nome dos modelos para o arquivo blog/admin.py
	from django.contrib import admin
	from .models import Post

	admin.site.register(Post)
--> Feito isso, acessando http://127.0.0.1:8000/admin/ no navegador, uma pagina pedindo autenticação vai aparecer, no terminal execute o comando abaixo, para criar um usuário. 
$ python manage.py createsuperuser
--> Depois é só acessar com seu login e senha, e uma tela contendo o nosso modelo Post será apresentada. 

6 - Versionando nosso código com GIT
--> Dentro da pasta do nosso projeto (projetoDjango no nosso caso)
$ git init
$ git config user.name "Seu nome"
$ git config user.email "Seu_Email@email.com"
--> Inicializar o repositório git é algo que só precisamos fazer uma vez por projeto 
--> Git irá controlar as alterações para todos os arquivos e pastas neste diretório, mas existem alguns arquivos que queremos ignorar. Fazemos isso através da criação de um arquivo chamado .gitignore no diretório base. crie um novo arquivo com o seguinte conteúdo:
	*.pyc
	__pycache__
	myvenv
	db.sqlite3
	.DS_Store
--> E salve como .gitignore na pasta de nível superior "djangogirls".
--> Para verificar o que será salvo, use git status no terminal.
--> Para salvar as edições 
$ git add --all
$ git commit -m "My Django APP, first commit"

7 - Publicando código no Github
--> Primeiro crie um repositório no Github
--> Depois execute o comando abaixo, onde o link após git remote add origin, é o link do seu repositório no github
$ git remote add origin Link_repositorio_Github

